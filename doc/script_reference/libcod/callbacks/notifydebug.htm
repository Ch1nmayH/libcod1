<HTML>
<HEAD>
</HEAD>

<style type="text/css">
<!--
H1  { padding: 0; margin: 0; font-size: 16pt; font-weight:bold; font-family:courier new; }
H2  { padding: 0; margin: 4; }
H3  { padding: 0; margin: 4; font-size: 13pt; font-weight:normal; }
P   { padding: 0; margin: 4; }
PRE { padding: 0; margin: 4; font-size: 10pt; font-weight:normal; color:#EEEEEE; }
TD  { padding: 4; margin: 0; }
UL  { margin-bottom:0; }
-->
</style>

<HR>
<H1>Notify (Debug)</H1>
<HR>
<BODY BGCOLOR='B0C4DE'>
<I>
Module: Callbacks<BR>
</I>

<BR>
<H2>Summary:</H2>
<TABLE BORDER='1' CELLSPACING='1' CELLPADDING='4' WIDTH='100%'>
<TR><TD BGCOLOR="C0D4EE">
<H3>
<p>Calls CodeCallback_NotifyDebug() in maps/mp/gametypes/_callbacksetup.gsc for each notify (including those coming from script code), including such that are cancelled. As a result, multiple calls to notify for the same entity and message string within a single server frame are passed to this callback - as opposed to waittill, which will only catch the first occurrence of such notify. The callback is executed one server frame before a waittill would catch it (i.e., the callback is 'faster'). The number of arguments passed to the callback is capped to MAX_NOTIFY_PARAMS. Some functions (e.g., player spawn) called from this callback require a waittillframeend before execution. This callback is meant to be used for debugging purposes only and is not considered stable enough for productive use. See <a href="../callbacks/notify.htm">CodeCallback_Notify</a> for a more stable alternative.</p>
</H3>
</TR></TD></TABLE>
<p>Note: The existance of the callback function is checked only once on server start. Functions added later are not taken into account, even after a map switch.</p>

<BR><BR>
<H2>Parameters:</H2>
<TABLE BORDER="1" CELLSPACING="1" CELLPADDING="4" WIDTH="100%">
<TR><TD BGCOLOR="C0D4EE">
<UL>
<LI>1 : &lt;entity&gt; The entity that is notified.</LI>
<LI>2 : &lt;message&gt; The message string.</LI>
<LI>3 : &lt;args&gt; List of additional arguments, or undefined if none.</LI>
</UL></TR></TD></TABLE>
<BR><BR>
<H2>Example:</H2>
<TABLE BORDER="1" CELLSPACING="1" CELLPADDING="4" WIDTH="100%">
<TR><TD BGCOLOR="222222">
<H3>
<PRE>
CodeCallback_NotifyDebug(entity, message, args)
{
    if(message == "trigger" || message == "touch") // Avoids console/CPU spam via the following logPrintConsole calls
        return;

    if(isDefined(args)) {
        for(i = 0; i < args.size; i++) {
            type = getType(args[i]);
            if(type == "OBJECT") {
                logPrintConsole("Script notify arg[" + i + "] is an object (entity, struct)\n");
            } else if(type == "FUNCTION") {
                logPrintConsole("Script notify arg[" + i + "] is a function, calling ...\n");
                [[args[i]]]();
            } else if(isDefined(args[i])) {
                logPrintConsole("Script notify arg[" + i + "] = '" + args[i] + "' (type " + type + ")\n");
            } else {
                logPrintConsole("Script notify arg[" + i + "] is undefined\n");
            }
        }
    } else {
        logPrintConsole("Script notify without args\n");
    }
    
    if(isDefined(entity.classname))
        logPrintConsole("Script notify '" + message + "' for entity of type " + getType(entity) + " with classname '" + entity.classname + "' at server time " + getTime() + "\n");
    else
        logPrintConsole("Script notify '" + message + "' for entity of type " + getType(entity) + " at server time " + getTime() + "\n");
}
</PRE>
</H3>
</TR></TD></TABLE>
<BR>
</BODY>
</HTML>
