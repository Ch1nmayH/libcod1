<HTML>
<HEAD>
</HEAD>

<style type="text/css">
<!--
H1  { padding: 0; margin: 0; font-size: 16pt; font-weight:bold; font-family:courier new; }
H2  { padding: 0; margin: 4; }
H3  { padding: 0; margin: 4; font-size: 13pt; font-weight:normal; }
P   { padding: 0; margin: 4; }
PRE { padding: 0; margin: 4; font-size: 10pt; font-weight:normal; color:#EEEEEE; }
TD  { padding: 4; margin: 0; }
UL  { margin-bottom:0; }
-->
</style>

<HR>
<H1>Map Weapons Load</H1>
<HR>
<BODY BGCOLOR='B0C4DE'>
<I>
Module: Callbacks<BR>
</I>

<BR>
<H2>Summary:</H2>
<TABLE BORDER='1' CELLSPACING='1' CELLPADDING='4' WIDTH='100%'>
<TR><TD BGCOLOR="C0D4EE">
<H3>
<p>Calls CodeCallback_MapWeaponsLoad() in maps/mp/gametypes/_callbacksetup.gsc right before <a href="../../stock/callbacks/main.htm">Gametype Main</a>, once on server start and again for every map change. If the value of the g_spawnMapWeapons cvar equals false, information about weapons that would have been loaded from the map file is provided and the weapons are neither spawned, nor precached. Currently does not affect turrets, these are spawned as usual.</p>
</H3>
</TR></TD></TABLE>
<p>Note: The existance of the callback function is checked only once on server start. Functions added later are not taken into account, even after a map switch.</p>

<BR><BR>
<H2>Parameters:</H2>
<TABLE BORDER="1" CELLSPACING="1" CELLPADDING="4" WIDTH="100%">
<TR><TD BGCOLOR="C0D4EE">
<UL>
<LI>1 : &lt;num&gt;: Number of weapons loaded from the map file, or zero if the value of the g_spawnMapWeapons cvar equals true.</LI>
<LI>2 : &lt;info&gt; Array of size 4 * num, or undefined if the value of the g_spawnMapWeapons cvar equals true. Provides the following attributes for each weapon: classname (string), origin (vector), angles (vector), count (int).</LI>
</UL></TR></TD></TABLE>
<BR><BR>
<H2>Example:</H2>
<TABLE BORDER="1" CELLSPACING="1" CELLPADDING="4" WIDTH="100%">
<TR><TD BGCOLOR="222222">
<H3>
<PRE>
CodeCallback_MapWeaponsLoad(num, info)
{
    // Spawn weapons as if the callback wouldn't exist
    for(i = 0; i < (num * 4); i += 4) {
        classname = info[i];
        origin = info[i + 1];
        angles = info[i + 2];
        count = info[i + 3];
        precacheItem(getSubStr(classname, 7));
        ent = spawn(classname, origin);
        ent.count = count;
        ent.angles = angles;
        ent setModel("");
    }
}
</PRE>
</H3>
</TR></TD></TABLE>
<BR>
</BODY>
</HTML>
